type Query {
  sites(at: Int): [Site]!
  site(name: String!): Site!
  users: [User]!
  regions: [Region]!
  region(osmId: String, statName: String): Region
  indicators: [Indicator]!
  indicator(id: String, name: String): Indicator
  values(indicatorId: String!, osmId: [String], year: [Int]): [Value]!
  valuesByOsmId(indicatorId: [String]!, osmId: String!, year: [Int]): [Value]!
}

type Mutation {
  newSite(site: SiteInput!): Site!
  newUser(site: UserInput!): User!
  login(email: String!, password: String!): AuthPayload
  newRegion(region: RegionInput!): Region!
  newIndicator(indicator: IndicatorInput!): Indicator!
  newValue(value: ValueInput!): Value!
}

type Site {
  name: String!
  latlng: [Float!]!
  address: String!
  year: Int!
  osmId: String!
  region: Region!
}

input SiteInput {
  name: String!
  latlng: [Float!]!
}

type User {
  email: String!
  hash: String!
}

input UserInput {
  email: String!
  password: String!
  confirmation: String!
}

type AuthPayload {
  token: String
  user: User
}

type Region {
  osmId: String!
  statName: String!
  level: Int!
}

input RegionInput {
  osmId: String!
  statName: String!
  level: Int!
}

type Indicator {
  id: String!
  name: String!
  isPositive: Boolean!
  baseIndicatorId: String
  baseIndicator: Indicator
}

input IndicatorInput {
  id: String!
  name: String!
  isPositive: Boolean!
}
type Value {
  indicatorId: String!
  indicator: Indicator
  targetCount: Int
  osmId: String!
  region: Region!
  year: Int!
  value: Float!
  baseValue: Value
  rate: Float
}

input ValueInput {
  indicatorId: String!
  osmId: String!
  year: Int!
  value: Float!
}
